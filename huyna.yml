name: Master CI/CD + Telegram

on:
  push:
    branches: [master,pro]
  pull_request:
    branches: [master,pro]
    types: [closed]

jobs:
  build-and-deploy:
    if: |
      github.event_name == 'push' || 
      (github.event.pull_request.merged == true && github.event_name == 'pull_request')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # –ü–æ–ª–Ω—ã–π history –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'

    - name: Restore Keystore
      run: |
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > android/app/key.jks
        chmod 600 android/app/key.jks
        ls -la android/app/key.jks

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake libgtk-3-dev liblzma-dev libavahi-client-dev libdbus-1-dev libxtst-dev libxkbfile-dev

    - name: Check Keystore
      run: |
        ls -la android/app/key.jks
        keytool -list -keystore android/app/key.jks -storepass 090807Dan4ik@

    - name: Install dependencies
      run: flutter pub get

    - name: Generate metadata
      id: metadata
      run: |
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ pubspec.yaml
        PROJECT_NAME=$(grep '^name:' pubspec.yaml | awk -F': ' '{print $2}' | tr -d '\r' | tr -d '"')
        VERSION=$(grep '^version:' pubspec.yaml | awk -F': ' '{print $2}' | cut -d'+' -f1 | tr -d '\r')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
        COMMIT_HASH=$(git rev-parse --short HEAD)
        COMMIT_MESSAGE=$(git log -1 --pretty=%B | tr -d '\r')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        TIMESTAMP=$(date +"%Y%m%d-%H%M")
        if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
          IDENTIFIER="pr${GITHUB_EVENT_NUMBER}"
        else
          IDENTIFIER="build${GITHUB_RUN_NUMBER}"
        fi
        
        APK_NAME="${PROJECT_NAME}_v${VERSION}_${IDENTIFIER}_${TIMESTAMP}_${COMMIT_HASH}.apk"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ output (–≤–∫–ª—é—á–∞—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
        {
          echo "project_name=$PROJECT_NAME"
          echo "version=$VERSION"
          echo "apk_name=$APK_NAME"
          echo "commit_message<<EOF"
          echo "$COMMIT_MESSAGE"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"

    - name: Build APK
      run: |
        flutter build apk --release --no-tree-shake-icons
        mv build/app/outputs/apk/release/app-release.apk build/app/outputs/apk/release/${{ steps.metadata.outputs.apk_name }}

    - name: Upload APK to Telegram
      env:
        BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        APK_PATH="build/app/outputs/apk/release/${{ steps.metadata.outputs.apk_name }}"

        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
        PROJECT_NAME=$(echo '${{ steps.metadata.outputs.project_name }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
        VERSION=$(echo '${{ steps.metadata.outputs.version }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
        COMMIT_MSG=$(echo '${{ steps.metadata.outputs.commit_message }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g' -e ':a;N;$!ba;s/\n/%0A/g')
        APK_FILENAME=$(echo '${{ steps.metadata.outputs.apk_name }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        MESSAGE="üöÄ *–ù–æ–≤–∞—è —Å–±–æ—Ä–∫–∞\\!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: ${PROJECT_NAME}%0Aüîñ –í–µ—Ä—Å–∏—è: ${VERSION}%0Aüìù –ö–æ–º–º–∏—Ç: \`${COMMIT_MSG}\`%0AüìÅ –§–∞–π–ª: \`${APK_FILENAME}\`"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ APK
        curl -F document=@"$APK_PATH" "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument?chat_id=${CHAT_ID}"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
          -d chat_id="${CHAT_ID}" \
          -d text="${MESSAGE}" \
          -d parse_mode="MarkdownV2"

    - name: Build Web
      run: |
        flutter clean
        flutter pub get
        flutter build web --release
        cd build/web
        zip -r ../../web_app.zip .
        cd ../../
        mv web_app.zip build/web_app_${{ steps.metadata.outputs.apk_name }}.zip

    - name: Upload Web to Telegram
      env:
        BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        WEB_PATH="build/web_app_${{ steps.metadata.outputs.apk_name }}.zip"

        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
        PROJECT_NAME=$(echo '${{ steps.metadata.outputs.project_name }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
        VERSION=$(echo '${{ steps.metadata.outputs.version }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
        COMMIT_MSG=$(echo '${{ steps.metadata.outputs.commit_message }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g' -e ':a;N;$!ba;s/\n/%0A/g')
        WEB_FILENAME=$(echo 'web_app_${{ steps.metadata.outputs.apk_name }}.zip' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        MESSAGE="üöÄ *–ù–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ Web\\!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: ${PROJECT_NAME}%0Aüîñ –í–µ—Ä—Å–∏—è: ${VERSION}%0Aüìù –ö–æ–º–º–∏—Ç: \`${COMMIT_MSG}\`%0AüìÅ –§–∞–π–ª: \`${WEB_FILENAME}\`"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
        curl -F document=@"$WEB_PATH" "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument?chat_id=${CHAT_ID}"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
          -d chat_id="${CHAT_ID}" \
          -d text="${MESSAGE}" \
          -d parse_mode="MarkdownV2"

    - name: Build Linux
      run: |
        flutter config --enable-linux-desktop
        flutter clean
        flutter pub get
        flutter build linux --release
        cd build/linux/x64/release/bundle
        zip -r ../../../../linux_app.zip .
        cd ../../../../
        mv linux_app.zip build/linux_app_${{ steps.metadata.outputs.apk_name }}.zip

    - name: Upload Linux to Telegram
      env:
        BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        FILE_PATH="build/linux_app_${{ steps.metadata.outputs.apk_name_no_ext }}.zip"
        VERSION="${{ steps.metadata.outputs.version }}"
        COMMIT="${{ steps.metadata.outputs.commit }}"
        PROJECT="${{ steps.metadata.outputs.project }}"
        FILENAME=$(basename "$FILE_PATH")

        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞: $FILE_PATH"
        if [ ! -f "$FILE_PATH" ]; then
          echo "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $FILE_PATH"
          exit 1
        fi

        TEXT="üöÄ *–ù–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ Linux\\!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: ${PROJECT}%0Aüîñ –í–µ—Ä—Å–∏—è: ${VERSION}%0Aüìù –ö–æ–º–º–∏—Ç: \`${COMMIT}\`%0AüìÅ –§–∞–π–ª: \`${FILENAME}\`"

        echo "–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è..."
        curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument" \
          -F chat_id="${CHAT_ID}" \
          -F document=@"$FILE_PATH" \
          -F caption="${TEXT}" \
          -F parse_mode="MarkdownV2"


    - name: Notify on Success
      if: success()
      run: |
        echo "All builds completed successfully!"
        echo "APK Name: ${{ steps.metadata.outputs.apk_name }}"
        echo "Version: ${{ steps.metadata.outputs.version }}"
        echo "Project Name: ${{ steps.metadata.outputs.project_name }}"
        echo "Commit Message: ${{ steps.metadata.outputs.commit_message }}"
        # Sending success message to Telegram
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="‚úÖ All builds completed successfully!%0A%0AAPK Name: `${{ steps.metadata.outputs.apk_name }}`%0AVersion: `${{ steps.metadata.outputs.version }}`%0AProject Name: `${{ steps.metadata.outputs.project_name }}`%0ACommit Message: `${{ steps.metadata.outputs.commit_message }}`" \
          -d parse_mode="MarkdownV2"
    
    - name: Notify on Failure
      if: failure()
      run: |
        echo "Build failed!"
        echo "Check the logs for details."
        echo "APK Name: ${{ steps.metadata.outputs.apk_name }}"
        echo "Version: ${{ steps.metadata.outputs.version }}"
        echo "Project Name: ${{ steps.metadata.outputs.project_name }}"
        echo "Commit Message: ${{ steps.metadata.outputs.commit_message }}"
        # Sending failure message to Telegram
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="‚ùå Build failed!%0A%0AAPK Name: `${{ steps.metadata.outputs.apk_name }}`%0AVersion: `${{ steps.metadata.outputs.version }}`%0AProject Name: `${{ steps.metadata.outputs.project_name }}`%0ACommit Message: `${{ steps.metadata.outputs.commit_message }}`" \
          -d parse_mode="MarkdownV2"

  build-windows:
    if: |
      github.event_name == 'push' || 
      (github.event.pull_request.merged == true && github.event_name == 'pull_request')
    runs-on: windows-latest
    needs: build-and-deploy

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'

    - name: Enable Windows desktop
      run: flutter config --enable-windows-desktop

    - name: Install dependencies
      run: flutter pub get

    - name: Build Windows
      run: |
        flutter clean
        flutter pub get
        flutter build windows --release
        cd build\windows\runner\Release
        7z a -tzip ..\..\..\windows_app.zip *
        cd ..\..\..
        move windows_app.zip build\windows_app_${{ needs.build-android-web-linux.outputs.apk_name }}.zip

    - name: Upload Windows to Telegram
      env:
        BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        $WINDOWS_PATH = "build\windows_app_${{ needs.build-android-web-linux.outputs.apk_name }}.zip"
        $PROJECT_NAME = '${{ needs.build-android-web-linux.outputs.project_name }}'.Replace(' ', '\ ').Replace('(', '\(').Replace(')', '\)').Replace('[', '\[').Replace(']', '\]').Replace('{', '\{').Replace('}', '\}').Replace('$', '\$').Replace('!', '\!')
        $VERSION = '${{ needs.build-android-web-linux.outputs.version }}'.Replace(' ', '\ ').Replace('(', '\(').Replace(')', '\)').Replace('[', '\[').Replace(']', '\]').Replace('{', '\{').Replace('}', '\}').Replace('$', '\$').Replace('!', '\!')
        $COMMIT_MSG = '${{ needs.build-android-web-linux.outputs.commit_message }}'.Replace('\n', '%0A').Replace(' ', '\ ').Replace('(', '\(').Replace(')', '\)').Replace('[', '\[').Replace(']', '\]').Replace('{', '\{').Replace('}', '\}').Replace('$', '\$').Replace('!', '\!')
        $WINDOWS_FILENAME = 'windows_app_${{ needs.build-android-web-linux.outputs.apk_name }}.zip'.Replace(' ', '\ ').Replace('(', '\(').Replace(')', '\)').Replace('[', '\[').Replace(']', '\]').Replace('{', '\{').Replace('}', '\}').Replace('$', '\$').Replace('!', '\!')

        $MESSAGE = "üöÄ *–ù–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ Windows\!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: $PROJECT_NAME%0Aüîñ –í–µ—Ä—Å–∏—è: $VERSION%0Aüìù –ö–æ–º–º–∏—Ç: `$COMMIT_MSG`%0AüìÅ –§–∞–π–ª: `$WINDOWS_FILENAME`"

        curl -F "document=@$WINDOWS_PATH" "https://api.telegram.org/bot${{ env.BOT_TOKEN }}/sendDocument?chat_id=${{ env.CHAT_ID }}"
        curl -s -X POST "https://api.telegram.org/bot${{ env.BOT_TOKEN }}/sendMessage" `
          -d "chat_id=${{ env.CHAT_ID }}" `
          -d "text=$MESSAGE" `
          -d "parse_mode=MarkdownV2"