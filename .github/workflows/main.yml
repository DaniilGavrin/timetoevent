name: Master CI/CD + Telegram

on:
  push:
    branches: [master, pro]
  pull_request:
    branches: [master, pro]
    types: [closed]

jobs:
  # –û–ë–©–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
  setup:
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.metadata.outputs.project_name }}
      version: ${{ steps.metadata.outputs.version }}
      apk_name: ${{ steps.metadata.outputs.apk_name }}
      apk_name_no_ext: ${{ steps.metadata.outputs.apk_name_no_ext }}
      commit_message: ${{ steps.metadata.outputs.commit_message }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
      
      - name: Restore Keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > android/app/key.jks
          chmod 600 android/app/key.jks
      
      - name: Check Keystore
        run: keytool -list -keystore android/app/key.jks -storepass 090807Dan4ik@
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libgtk-3-dev liblzma-dev libavahi-client-dev libdbus-1-dev libxtst-dev libxkbfile-dev
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Generate metadata
        id: metadata
        run: |
          PROJECT_NAME=$(grep '^name:' pubspec.yaml | awk -F': ' '{print $2}' | tr -d '\r')
          VERSION=$(grep '^version:' pubspec.yaml | awk -F': ' '{print $2}' | cut -d'+' -f1 | tr -d '\r')
          COMMIT_HASH=$(git rev-parse --short HEAD)
          COMMIT_MESSAGE=$(git log -1 --pretty=%B | tr -d '\r')
          TIMESTAMP=$(date +"%Y%m%d-%H%M")
          
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            IDENTIFIER="pr${GITHUB_EVENT_NUMBER}"
          else
            IDENTIFIER="build${GITHUB_RUN_NUMBER}"
          fi
          
          APK_NAME="${PROJECT_NAME}_v${VERSION}_${IDENTIFIER}_${TIMESTAMP}_${COMMIT_HASH}.apk"
          APK_NAME_NO_EXT=$(echo "$APK_NAME" | sed 's/\.apk$//')
          
          {
            echo "project_name=$PROJECT_NAME"
            echo "version=$VERSION"
            echo "apk_name=$APK_NAME"
            echo "apk_name_no_ext=$APK_NAME_NO_EXT"
            echo "commit_message<<EOF"
            echo "$COMMIT_MESSAGE"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  # –°–ë–û–†–ö–ê ANDROID (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
  build-android:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
      
      - name: Restore Keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > android/app/key.jks
          chmod 600 android/app/key.jks
      
      - name: Build APK
        run: |
          flutter build apk --release --no-tree-shake-icons
          mv build/app/outputs/apk/release/app-release.apk build/app/outputs/apk/release/${{ needs.setup.outputs.apk_name }}
      
      - name: Upload APK to Telegram
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          APK_PATH="build/app/outputs/apk/release/${{ needs.setup.outputs.apk_name }}"
          
          # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
          PROJECT_NAME=$(echo '${{ needs.setup.outputs.project_name }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
          VERSION=$(echo '${{ needs.setup.outputs.version }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
          COMMIT_MSG=$(echo '${{ needs.setup.outputs.commit_message }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g' -e ':a;N;$!ba;s/\n/%0A/g')
          APK_FILENAME=$(echo '${{ needs.setup.outputs.apk_name }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
          
          # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
          MESSAGE="üöÄ *–ù–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ Android\\!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: ${PROJECT_NAME}%0Aüîñ –í–µ—Ä—Å–∏—è: ${VERSION}%0Aüìù –ö–æ–º–º–∏—Ç: \`${COMMIT_MSG}\`%0AüìÅ –§–∞–π–ª: \`${APK_FILENAME}\`"
          
          # –û—Ç–ø—Ä–∞–≤–∫–∞ APK
          curl -F document=@"$APK_PATH" "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument?chat_id=${CHAT_ID}"
          
          # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="MarkdownV2"

  # –°–ë–û–†–ö–ê WEB (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
  build-web:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
      
      - name: Build Web
        run: |
          flutter clean
          flutter pub get
          flutter build web --release
          cd build/web
          zip -r ../../web_app.zip .
          cd ../../
          mv web_app.zip build/web_app_${{ needs.setup.outputs.apk_name }}.zip
      
      - name: Upload Web to Telegram
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          WEB_PATH="build/web_app_${{ needs.setup.outputs.apk_name }}.zip"
          
          # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
          PROJECT_NAME=$(echo '${{ needs.setup.outputs.project_name }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
          VERSION=$(echo '${{ needs.setup.outputs.version }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
          COMMIT_MSG=$(echo '${{ needs.setup.outputs.commit_message }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g' -e ':a;N;$!ba;s/\n/%0A/g')
          WEB_FILENAME=$(echo 'web_app_${{ needs.setup.outputs.apk_name }}.zip' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
          
          # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
          MESSAGE="üöÄ *–ù–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ Web\\!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: ${PROJECT_NAME}%0Aüîñ –í–µ—Ä—Å–∏—è: ${VERSION}%0Aüìù –ö–æ–º–º–∏—Ç: \`${COMMIT_MSG}\`%0AüìÅ –§–∞–π–ª: \`${WEB_FILENAME}\`"
          
          # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
          curl -F document=@"$WEB_PATH" "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument?chat_id=${CHAT_ID}"
          
          # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="MarkdownV2"

  # –°–ë–û–†–ö–ê LINUX (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
  build-linux:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libgtk-3-dev liblzma-dev libavahi-client-dev libdbus-1-dev libxtst-dev libxkbfile-dev libsecret-1
      
      - name: Build Linux
        run: |
          flutter config --enable-linux-desktop
          flutter clean
          flutter pub get
          flutter build linux --release
          cd build/linux/x64/release/bundle
          zip -r linux_app.zip .
          mkdir -p $GITHUB_WORKSPACE/build
          mv linux_app.zip $GITHUB_WORKSPACE/build/linux_app_${{ needs.setup.outputs.apk_name_no_ext }}.zip
      
      - name: Upload Linux to Telegram
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          FILE_PATH="build/linux_app_${{ needs.setup.outputs.apk_name_no_ext }}.zip"
          
          # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
          PROJECT_NAME=$(echo '${{ needs.setup.outputs.project_name }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
          VERSION=$(echo '${{ needs.setup.outputs.version }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
          COMMIT_MSG=$(echo '${{ needs.setup.outputs.commit_message }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g' -e ':a;N;$!ba;s/\n/%0A/g')
          FILENAME=$(echo 'linux_app_${{ needs.setup.outputs.apk_name_no_ext }}.zip' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
          
          # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
          MESSAGE="üöÄ *–ù–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ Linux\\!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: ${PROJECT_NAME}%0Aüîñ –í–µ—Ä—Å–∏—è: ${VERSION}%0Aüìù –ö–æ–º–º–∏—Ç: \`${COMMIT_MSG}\`%0AüìÅ –§–∞–π–ª: \`${FILENAME}\`"
          
          # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
          curl -F document=@"$FILE_PATH" "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument?chat_id=${CHAT_ID}"
          
          # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="MarkdownV2"

  # –°–ë–û–†–ö–ê WINDOWS (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
  build-windows:
    needs: setup
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
      
      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Build Windows
        run: |
          flutter clean
          flutter pub get
          flutter build windows --release
          cd build\windows\x64\runner\Release
          7z a -tzip ..\..\..\..\windows_app.zip *
          cd ..\..\..\..
          # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É build, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if (-not (Test-Path -Path "build")) {
            New-Item -ItemType Directory -Path "build"
          }
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ apk_name_no_ext –Ω–µ –ø—É—Å—Ç–æ–π
          $apkNameNoExt = "${{ needs.setup.outputs.apk_name_no_ext }}"
          if ([string]::IsNullOrWhiteSpace($apkNameNoExt)) {
            Write-Host "::error::apk_name_no_ext is empty. Using fallback name."
            $apkNameNoExt = "fallback_build_$(Get-Date -Format 'yyyyMMdd-HHmmss')"
          }
          # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º
          Move-Item -Path "windows_app.zip" -Destination "${env:GITHUB_WORKSPACE}\build\windows_app_$apkNameNoExt.zip"
          Write-Host "Windows app successfully moved to build\windows_app_$apkNameNoExt.zip"
      
      - name: Upload Windows to Telegram
        shell: bash
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          APK_NAME="${{ needs.setup.outputs.apk_name }}"
          APK_NO_EXT="${APK_NAME%.apk}"
          WINDOWS_FILE="build/windows_app_${APK_NO_EXT}.zip"
          # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—ç—à–µ–π (–µ—Å–ª–∏ GitHub Actions –Ω–∞ Windows)
          WINDOWS_FILE="${WINDOWS_FILE//\\//}"
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
          if [[ ! -f "$WINDOWS_FILE" ]]; then
            echo "::error::File not found: $WINDOWS_FILE"
            echo "Contents of build directory:"
            ls -al build || echo "build directory not found"
            exit 1
          fi
          # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram MarkdownV2
          PROJECT_NAME=$(echo '${{ needs.setup.outputs.project_name }}' | sed -e 's/[_.*()>#+=|{}$\!]/\\&/g')
          VERSION=$(echo '${{ needs.setup.outputs.version }}' | sed -e 's/[_.*()>#+=|{}$\!]/\\&/g')
          COMMIT_MSG=$(echo '${{ needs.setup.outputs.commit_message }}' | sed -e 's/[_.*()>#+=|{}$\!]/\\&/g' -e ':a;N;$!ba;s/\n/%0A/g')
          FILENAME_ESC=$(echo "windows_app_${APK_NO_EXT}.zip" | sed -e 's/[_.*()>#+=|{}$\!]/\\&/g')
          # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          MESSAGE="üöÄ *–ù–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ Windows\\!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: ${PROJECT_NAME}%0Aüîñ –í–µ—Ä—Å–∏—è: ${VERSION}%0Aüìù –ö–æ–º–º–∏—Ç: \`${COMMIT_MSG}\`%0AüìÅ –§–∞–π–ª: \`${FILENAME_ESC}\`"
          # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
          curl -F "document=@${WINDOWS_FILE}" "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument?chat_id=${CHAT_ID}"
          # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="MarkdownV2"

  # –û–ë–©–ï–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï (–ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å–±–æ—Ä–æ–∫)
  notify:
    needs: [setup, build-android, build-web, build-linux, build-windows]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on Success
        if: success()
        run: |
          # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
          PROJECT_ESCAPED=$(echo '${{ needs.setup.outputs.project_name }}' | sed -e 's/[_*[](){}|+!=#\$^]/\\&/g')
          VERSION_ESCAPED=$(echo '${{ needs.setup.outputs.version }}' | sed -e 's/[_*[](){}|+!=#\$^]/\\&/g')
          COMMIT_ESCAPED=$(echo '${{ needs.setup.outputs.commit_message }}' | sed -e 's/[_*[](){}|+!=#\$^]/\\&/g' -e ':a;N;$!ba;s/\n/%0A/g')
          APK_ESCAPED=$(echo '${{ needs.setup.outputs.apk_name }}' | sed -e 's/[_*[](){}|+!=#\$^]/\\&/g')
          
          # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
          TEXT=$(echo -e "‚úÖ All builds completed successfully!%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: *$PROJECT_ESCAPED*%0Aüîñ –í–µ—Ä—Å–∏—è: *$VERSION_ESCAPED*%0Aüìù –ö–æ–º–º–∏—Ç: \`$COMMIT_ESCAPED\`%0AüìÅ APK: \`$APK_ESCAPED\`")
          
          # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="$TEXT" \
            -d parse_mode="MarkdownV2"
      
      - name: Notify on Failure
        if: failure()
        run: |
          TEXT=$(echo -e "‚ùå *Build failed!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: *${{ needs.setup.outputs.project_name }}*%0Aüîñ –í–µ—Ä—Å–∏—è: *${{ needs.setup.outputs.version }}*%0Aüìù –ö–æ–º–º–∏—Ç: \`${{ needs.setup.outputs.commit_message }}\`%0AüìÅ APK: \`${{ needs.setup.outputs.apk_name }}\`")
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="$TEXT" \
            -d parse_mode="MarkdownV2"