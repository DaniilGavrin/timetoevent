name: Master CI/CD + Telegram

on:
  push:
    branches: [master, pro]
  pull_request:
    branches: [master, pro]
    types: [closed]

jobs:
  build-and-deploy:
    if: |
      github.event_name == 'push' || 
      (github.event.pull_request.merged == true && github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.metadata.outputs.project_name }}
      version: ${{ steps.metadata.outputs.version }}
      apk_name: ${{ steps.metadata.outputs.apk_name }}
      apk_name_no_ext: ${{ steps.metadata.outputs.apk_name_no_ext }}
      commit_message: ${{ steps.metadata.outputs.commit_message }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'

      - name: Restore Keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > android/app/key.jks
          chmod 600 android/app/key.jks

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libgtk-3-dev liblzma-dev libavahi-client-dev libdbus-1-dev libxtst-dev libxkbfile-dev

      - name: Check Keystore
        run: keytool -list -keystore android/app/key.jks -storepass 090807Dan4ik@

      - name: Install dependencies
        run: flutter pub get

      - name: Generate metadata
        id: metadata
        run: |
          PROJECT_NAME=$(grep '^name:' pubspec.yaml | awk -F': ' '{print $2}' | tr -d '\r')
          VERSION=$(grep '^version:' pubspec.yaml | awk -F': ' '{print $2}' | cut -d'+' -f1 | tr -d '\r')
          COMMIT_HASH=$(git rev-parse --short HEAD)
          COMMIT_MESSAGE=$(git log -1 --pretty=%B | tr -d '\r')
          TIMESTAMP=$(date +"%Y%m%d-%H%M")

          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            IDENTIFIER="pr${GITHUB_EVENT_NUMBER}"
          else
            IDENTIFIER="build${GITHUB_RUN_NUMBER}"
          fi

          APK_NAME="${PROJECT_NAME}_v${VERSION}_${IDENTIFIER}_${TIMESTAMP}_${COMMIT_HASH}.apk"
          APK_NAME_NO_EXT=$(echo "$APK_NAME" | sed 's/\.apk$//')

          {
            echo "project_name=$PROJECT_NAME"
            echo "version=$VERSION"
            echo "apk_name=$APK_NAME"
            echo "apk_name_no_ext=$APK_NAME_NO_EXT"
            echo "commit_message<<EOF"
            echo "$COMMIT_MESSAGE"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build Linux
        run: |
          flutter config --enable-linux-desktop
          flutter clean
          flutter pub get
          flutter build linux --release
          cd build/linux/x64/release/bundle
          zip -r linux_app.zip .
          mkdir -p $GITHUB_WORKSPACE/build
          mv linux_app.zip $GITHUB_WORKSPACE/build/linux_app_${{ steps.metadata.outputs.apk_name_no_ext }}.zip

      - name: Upload Linux to Telegram
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          FILE_PATH="build/linux_app_${{ steps.metadata.outputs.apk_name_no_ext }}.zip"
          
          # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
          PROJECT_NAME=$(echo '${{ steps.metadata.outputs.project_name }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
          VERSION=$(echo '${{ steps.metadata.outputs.version }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')
          COMMIT_MSG=$(echo '${{ steps.metadata.outputs.commit_message }}' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g' -e ':a;N;$!ba;s/\n/%0A/g')
          WEB_FILENAME=$(echo 'web_app_${{ steps.metadata.outputs.apk_name }}.zip' | sed -e 's/[_.*()>#+-=|{}$!]/\\&/g')

          # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
          MESSAGE="üöÄ *–ù–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ Linux\\!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: ${PROJECT_NAME}%0Aüîñ –í–µ—Ä—Å–∏—è: ${VERSION}%0Aüìù –ö–æ–º–º–∏—Ç: \`${COMMIT_MSG}\`%0AüìÅ –§–∞–π–ª: \`${WEB_FILENAME}\`"

          # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
          curl -F document=@"$FILE_PATH" "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument?chat_id=${CHAT_ID}"

          # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="MarkdownV2"

      - name: Notify on Success
        if: success()
        run: |
          # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
          PROJECT_ESCAPED=$(echo "${{ steps.metadata.outputs.project_name }}" | sed -e 's/[_*[](){}|+!=#\$^]/\\&/g')
          VERSION_ESCAPED=$(echo "${{ steps.metadata.outputs.version }}" | sed -e 's/[_*[](){}|+!=#\$^]/\\&/g')
          COMMIT_ESCAPED=$(echo "${{ steps.metadata.outputs.commit_message }}" | sed -e 's/[_*[](){}|+!=#\$^]/\\&/g' -e ':a;N;$!ba;s/\n/%0A/g')
          APK_ESCAPED=$(echo "${{ steps.metadata.outputs.apk_name }}" | sed -e 's/[_*[](){}|+!=#\$^]/\\&/g')

          # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
          TEXT=$(echo -e "‚úÖ All builds completed successfully!%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: *$PROJECT_ESCAPED*%0Aüîñ –í–µ—Ä—Å–∏—è: *$VERSION_ESCAPED*%0Aüìù –ö–æ–º–º–∏—Ç: \`$COMMIT_ESCAPED\`%0AüìÅ APK: \`$APK_ESCAPED\`")

          # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
              -d text="$TEXT" \
              -d parse_mode="MarkdownV2"

      - name: Notify on Failure
        if: failure()
        run: |
          TEXT=$(echo -e "‚ùå *Build failed!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: *${{ steps.metadata.outputs.project_name }}*%0Aüîñ –í–µ—Ä—Å–∏—è: *${{ steps.metadata.outputs.version }}*%0Aüìù –ö–æ–º–º–∏—Ç: \`${{ steps.metadata.outputs.commit_message }}\`%0AüìÅ APK: \`${{ steps.metadata.outputs.apk_name }}\`")
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="$TEXT" \
            -d parse_mode="MarkdownV2"

  build-windows:
    if: |
      github.event_name == 'push' || 
      (github.event.pull_request.merged == true && github.event_name == 'pull_request')
    runs-on: windows-latest
    needs: build-and-deploy

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'

    - name: Enable Windows desktop
      run: flutter config --enable-windows-desktop

    - name: Install dependencies
      run: flutter pub get

    - name: Build Windows
      run: |
        flutter clean
        flutter pub get
        flutter build windows --release
        cd build\windows\x64\runner\Release
        7z a -tzip ..\..\..\..\windows_app.zip *
        cd ..\..\..\..
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É build, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (-not (Test-Path -Path "build")) {
          New-Item -ItemType Directory -Path "build"
        }
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ apk_name_no_ext –Ω–µ –ø—É—Å—Ç–æ–π
        $apkNameNoExt = "${{ needs.build-and-deploy.outputs.apk_name_no_ext }}"
        if ([string]::IsNullOrWhiteSpace($apkNameNoExt)) {
          Write-Host "::error::apk_name_no_ext is empty. Using fallback name."
          $apkNameNoExt = "fallback_build_$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        }
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º
        Move-Item -Path "windows_app.zip" -Destination "build\windows_app_$apkNameNoExt.zip"
        Write-Host "Windows app successfully moved to build\windows_app_$apkNameNoExt.zip"

        - name: Upload Windows to Telegram
          env:
            BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
            CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          run: |
            $apkNameNoExt = "${{ needs.build-and-deploy.outputs.apk_name_no_ext }}"
            if ([string]::IsNullOrWhiteSpace($apkNameNoExt)) {
              $apkNameNoExt = "fallback_build_$(Get-Date -Format 'yyyyMMdd-HHmmss')"
            }

            $WINDOWS_PATH = "build\windows_app_$apkNameNoExt.zip"
            if (-not (Test-Path -Path $WINDOWS_PATH)) {
              Write-Host "::error::File not found: $WINDOWS_PATH"
              exit 1
            }

            $PROJECT_NAME = '${{ needs.build-and-deploy.outputs.project_name }}'
            $VERSION = '${{ needs.build-and-deploy.outputs.version }}'
            $COMMIT_MSG = '${{ needs.build-and-deploy.outputs.commit_message }}'
            $WINDOWS_FILENAME = "windows_app_$apkNameNoExt.zip"

            # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
            $escape = { param($s) $s -replace '([_*\[\]()~`>#+\-=|{}.!])', '\\$1' }
            $PROJECT_NAME_ESC = & $escape $PROJECT_NAME
            $VERSION_ESC = & $escape $VERSION
            $COMMIT_MSG_ESC = (& $escape $COMMIT_MSG) -replace "`n", "%0A"
            $WINDOWS_FILENAME_ESC = & $escape $WINDOWS_FILENAME

            $MESSAGE = "üöÄ *–ù–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ Windows!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: *$PROJECT_NAME_ESC*%0Aüîñ –í–µ—Ä—Å–∏—è: *$VERSION_ESC*%0Aüìù –ö–æ–º–º–∏—Ç: `$COMMIT_MSG_ESC`%0AüìÅ –§–∞–π–ª: `$WINDOWS_FILENAME_ESC`"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            Invoke-RestMethod -Uri "https://api.telegram.org/bot${{ env.BOT_TOKEN }}/sendDocument" `
              -Method Post `
              -Form @{
                chat_id = "${{ env.CHAT_ID }}"
                document = Get-Item $WINDOWS_PATH
              }

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            Invoke-RestMethod -Uri "https://api.telegram.org/bot${{ env.BOT_TOKEN }}/sendMessage" `
              -Method Post `
              -ContentType "application/x-www-form-urlencoded" `
              -Body @{
                chat_id = "${{ env.CHAT_ID }}"
                text = $MESSAGE
                parse_mode = "MarkdownV2"
              }