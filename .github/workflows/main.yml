name: Master CI/CD + Telegram

on:
  push:
    branches: [master, pro]
  pull_request:
    branches: [master, pro]
    types: [closed]

jobs:
  build-and-deploy:
    if: |
      github.event_name == 'push' || 
      (github.event.pull_request.merged == true && github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.metadata.outputs.project_name }}
      version: ${{ steps.metadata.outputs.version }}
      apk_name: ${{ steps.metadata.outputs.apk_name }}
      apk_name_no_ext: ${{ steps.metadata.outputs.apk_name_no_ext }}
      commit_message: ${{ steps.metadata.outputs.commit_message }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'

      - name: Restore Keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > android/app/key.jks
          chmod 600 android/app/key.jks

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libgtk-3-dev liblzma-dev libavahi-client-dev libdbus-1-dev libxtst-dev libxkbfile-dev

      - name: Check Keystore
        run: |
          keytool -list -keystore android/app/key.jks -storepass 090807Dan4ik@

      - name: Install dependencies
        run: flutter pub get

      - name: Generate metadata
        id: metadata
        run: |
          PROJECT_NAME=$(grep '^name:' pubspec.yaml | awk -F': ' '{print $2}' | tr -d '\r')
          VERSION=$(grep '^version:' pubspec.yaml | awk -F': ' '{print $2}' | cut -d'+' -f1 | tr -d '\r')
          COMMIT_HASH=$(git rev-parse --short HEAD)
          COMMIT_MESSAGE=$(git log -1 --pretty=%B | tr -d '\r')
          TIMESTAMP=$(date +"%Y%m%d-%H%M")

          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            IDENTIFIER="pr${GITHUB_EVENT_NUMBER}"
          else
            IDENTIFIER="build${GITHUB_RUN_NUMBER}"
          fi

          APK_NAME="${PROJECT_NAME}_v${VERSION}_${IDENTIFIER}_${TIMESTAMP}_${COMMIT_HASH}.apk"
          APK_NAME_NO_EXT=$(echo "$APK_NAME" | sed 's/\.apk$//')

          {
            echo "project_name=$PROJECT_NAME"
            echo "version=$VERSION"
            echo "apk_name=$APK_NAME"
            echo "apk_name_no_ext=$APK_NAME_NO_EXT"
            echo "commit_message<<EOF"
            echo "$COMMIT_MESSAGE"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build Linux
        run: |
          flutter config --enable-linux-desktop
          flutter clean
          flutter pub get
          flutter build linux --release
          cd build/linux/x64/release/bundle
          zip -r ../../../../linux_app.zip .
          cd ../../../../
          mkdir -p build
          mv "linux_app.zip" "build/linux_app_${{ steps.metadata.outputs.apk_name_no_ext }}.zip"

      - name: Upload Linux to Telegram
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          FILE_PATH="build/linux_app_${{ steps.metadata.outputs.apk_name_no_ext }}.zip"
          NAME=$(echo '${{ steps.metadata.outputs.project_name }}' | sed 's/[][_*(){}#+=!|$.\^]/\\&/g')
          VER=$(echo '${{ steps.metadata.outputs.version }}' | sed 's/[][_*(){}#+=!|$.\^]/\\&/g')
          MSG=$(echo '${{ steps.metadata.outputs.commit_message }}' | sed ':a;N;$!ba;s/\n/%0A/g' | sed 's/[][_*(){}#+=!|$.\^]/\\&/g')
          FILENAME=$(basename "$FILE_PATH" | sed 's/[][_*(){}#+=!|$.\^]/\\&/g')
          TEXT="üöÄ *–ù–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ Linux\\!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: ${NAME}%0Aüîñ –í–µ—Ä—Å–∏—è: ${VER}%0Aüìù –ö–æ–º–º–∏—Ç: \`${MSG}\`%0AüìÅ –§–∞–π–ª: \`${FILENAME}\`"

          curl -f -F document=@"$FILE_PATH" "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument?chat_id=${CHAT_ID}"
          curl -f -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
            -d "chat_id=${CHAT_ID}" \
            -d "text=$TEXT" \
            -d "parse_mode=MarkdownV2"

      - name: Notify on Success
        if: success()
        run: |
          TEXT="‚úÖ All builds completed successfully!%0A%0AAPK: \`${{ steps.metadata.outputs.apk_name }}\`%0AVersion: \`${{ steps.metadata.outputs.version }}\`%0AProject: \`${{ steps.metadata.outputs.project_name }}\`%0ACommit: \`${{ steps.metadata.outputs.commit_message }}\`"
          curl -f -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="$TEXT" \
            -d parse_mode="MarkdownV2"

      - name: Notify on Failure
        if: failure()
        run: |
          TEXT="‚ùå Build failed!%0A%0AAPK: \`${{ steps.metadata.outputs.apk_name }}\`%0AVersion: \`${{ steps.metadata.outputs.version }}\`%0AProject: \`${{ steps.metadata.outputs.project_name }}\`%0ACommit: \`${{ steps.metadata.outputs.commit_message }}\`"
          curl -f -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="$TEXT" \
            -d parse_mode="MarkdownV2"

  build-windows:
    if: |
      github.event_name == 'push' || 
      (github.event.pull_request.merged == true && github.event_name == 'pull_request')
    runs-on: windows-latest
    needs: build-and-deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: stable

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows
        run: |
          flutter clean
          flutter pub get
          flutter build windows --release
          cd build\windows\runner\Release
          7z a -tzip ..\..\..\windows_app.zip *
          cd ..\..\..
          mkdir build -Force
          move windows_app.zip build\windows_app_${{ needs.build-and-deploy.outputs.apk_name_no_ext }}.zip

      - name: Upload Windows to Telegram
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          $path = "build/windows_app_${{ needs.build-and-deploy.outputs.apk_name_no_ext }}.zip"
          $name = '${{ needs.build-and-deploy.outputs.project_name }}' -replace '([_*\(\)\[\]\{\}\+\=\!\|#\$\.])', '\\$1'
          $ver = '${{ needs.build-and-deploy.outputs.version }}' -replace '([_*\(\)\[\]\{\}\+\=\!\|#\$\.])', '\\$1'
          $msg = '${{ needs.build-and-deploy.outputs.commit_message }}' -replace "`r`n", "%0A" -replace '([_*\(\)\[\]\{\}\+\=\!\|#\$\.])', '\\$1'
          $filename = "windows_app_${{ needs.build-and-deploy.outputs.apk_name_no_ext }}.zip" -replace '([_*\(\)\[\]\{\}\+\=\!\|#\$\.])', '\\$1'
          $message = "üöÄ *–ù–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ Windows\!*%0A%0Aüì¶ –ü—Ä–æ–µ–∫—Ç: $name%0Aüîñ –í–µ—Ä—Å–∏—è: $ver%0Aüìù –ö–æ–º–º–∏—Ç: `$msg`%0AüìÅ –§–∞–π–ª: `$filename`"

          curl -f -F "document=@$path" "https://api.telegram.org/bot${{ env.BOT_TOKEN }}/sendDocument?chat_id=${{ env.CHAT_ID }}"
          curl -f -X POST "https://api.telegram.org/bot${{ env.BOT_TOKEN }}/sendMessage" `
            -d "chat_id=${{ env.CHAT_ID }}" `
            -d "text=$message" `
            -d "parse_mode=MarkdownV2"
